NOTE: Don't use this file to guide you in setup anymore. Use the deployment_guide.txt file

NOTE: This guide now works for all series of machine: both 23 and 24.

NOTE: We are now using the capture_machine_deploy_files repository to download our executable code for the wifi and bluetooth sniffers. We are now creating directories called "wifi_sniffer" and "bluetooth_sniffer" to execute our code from. The compiled source code stored in this repository now specifies these directories, as do the scripts. Be sure to test this though on each deploy to ensure everything works properly. No need to really follow the bluetooth and wifi sections from this guide, as we no longer need to compile source code on the remote machine anymore. Note that the crontab below will need to be modified after copying it into the crontab on the machine to reflect the directory name changes as well.

NOTE: When dealing with a client's machine where we must create the guard user from the command line and it is not the first user, we need to create the .ssh directory in the guard user's home directory, then create within it the keys directory. Inside that directory we place the sgs_stats_api1.pem key. We then chmod it with 400. Then do chmod 700 .ssh as well.
To create a new user do sudo su as the default user, then do sudo adduser guard and provide the desired password. We will then run sudo visudo (or just visudo as root) and add the guard user as described below in step 3 of the PRE-SETUP section. Then we must change the password for the default user. Run exit to get back to default user, then run passwd. Change the password to whatever you want. Be sure that the new password is not the same as that of the guard user. Then we can exit and log in as guard to the same machine via ssh and carry on as normal.

NOTE: We had issues with the wifi NICs not getting any reads from traffic when deployed. I am thinking it has to do with the avahi-deamon interfering and possibly putting the NICs back into managed mode. The following link discusses how to stop and disable the avahi-daemon: https://askubuntu.com/questions/205937/how-can-i-disable-avahi-daemon
Below is what I believe to be the steps necessary for stopping it completely:
You need to mask the socket to prevent applications starting avahi-daemon:
systemctl mask avahi-daemon.socket
systemctl disable avahi-daemon
systemctl stop avahi-daemon

The following also may be of interest for disabling and keeping the avahi-daemon from trying to respawn:
You might not need to stop it from starting up when PC boots, but maybe prevent it from respawn as it does, when you kill it.
So, just comment out the respawn in /etc/init/avahi-daemon.conf
Killing that process always failed, so couldn't get airmon-ng check to pass. Commenting out the respawning, it kills and never comes back hunting me.

The next step to ensure that the client-created user (for example drop-data-1004) cannot get root privileges and see the files within our guard user that we create is to remove it from the sudoers group altogether. First check the sudoers file with sudo visudo as the guard user. Look for any explicit granting of sudo privileges to the client-created user and either comment them out or remove them. Be sure that the guard user is added as a sudoer before you remove the client-created user from root privileges. Otherwise no users will be able to get root privileges. See step 3 in the PRE-SETUP section. DO THIS BEFORE YOU REVOKE PRIVILEGES FROM THE CLIENT-CREATED USER!!!
Finally, run sudo deluser <client-created username> sudo. For example, for the user "drop-data-1004", we would call:
sudo deluser drop-data-1004 sudo
This will remove the drop-data-1004 user from the sudo users group which will make it so they can not run sudo commands and they cannot see or access the files stored within the guard user's directory.

PRE-SETUP:
1. Install Ubuntu 24.04 on the LattePanda machine.
2. Create the guard user with a password.
3. Use sudo visudo to modify permissions so that the guard user can run as root and can run sudo commands without requiring a password (you may have to run sudo su in order to get to root when doing this).
    The following steps are used to accomplish this:
        - sudo su
        - sudo visudo
        - Add guard ALL=(ALL:ALL)ALL below the line that specifies root ALL=(ALL:ALL)ALL
        - At the very bottom of the file user the line that says "@includedir etc/sudoers.d", append a new line that   says "guard ALL=(ALL)NOPASSWD:ALL"
        - Save and exit the file.
4. Install git using sudo apt install git
5. NOTE: Current access token is: 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
6. Create text file in home/guard directory called location_config.txt that will store the name of the location that the machine will be deployed at. All send scripts will read from this config file.
7. Create a text file in /home/guard called box_id.txt that will store the box ID. This will be used by the bluetooth capture and wifi capture programs in the naming of its output files to avoid naming collisions on the api server.
8. Install aircrack-ng for wifi sniffer (for ease of putting the NICs into monitor mode only): sudo apt install aircrack-ng
9. Install the libpcap development library for the wifi source code dependencies: sudo apt-get install libpcap-dev
10. Install the bluetooth development library for the bluetooth source code dependencies: sudo apt-get install libbluetooth-dev
11. Set up the local machine to be able to SCP up to the remote server:
    Copy the .pem key for the remote server to the ~/.ssh/keys directory on the local machine.
    Create the key file as sgs_stats_api1.pem and update permissions for the .pem key to work with the remote server securely by running: chmod 400 ~/.ssh/keys/<pem_key_name_here>.pem.
    Run one of the send scripts manually to set up the connection for future use.
12. Get the firmware necessary for running the NICs for wifi capture (we are running the Alfa AC600/Realtek NICs)
    Install dkms: sudo apt-get install dkms
    Clone the repository from aircrack: git clone -b v5.6.4.2 https://github.com/aircrack-ng/rtl8812au.git (this is the specific version of the repository made for Ubuntu and Debian).
    cd rtl8812au
    git checkout 63cf0b4584aa8878b0fe8ab38017f31c319bde3d (check out the specific version of the project that still works without errors with Ubuntu 24.04 and Debian 12).
    sudo make dkms_install
13. Be sure that openssh-server is installed.
    Run sudo apt-get update
    sudo apt-get install openssh-server
    If you get an error saying that dependencies are broken, there may be a versioning issue between the openssh-client version dependency for openssh-server to be installed. You may have to install a slightly older version of openssh-client in order to get the openssh-server install to work correctly. Be sure to read the error to ensure that this is in fact the issue and it is not some other issue. In order to install downgraded version of openssh-client, run sudo apt-get install openssh-client=1:9.6p1-3ubuntu13.4
14. Install ifconfig: sudo apt install net-tools
15. To be sure that autosuspend is turned off, open the gdm3 config file: sudo nano /etc/gdm3/greeter.dconf-defaults
16. Uncomment the line that says sleep-inactive-ac-timeout and change the value to 0
17. Uncomment the line that says sleep-inactive-ac-type and change the value to 'blank'
18. Save and exit the file. Restart the gdm3 service with sudo systemctl restart gdm3 to make the changes take place on the system.
19. Next, go into the BIOS and ensure that the computer will boot on power, meaning that whenever it is plugged in it will automatically boot up. It will usually be under power boot settings or power management. It is different for every machine. Note that this step may not be necessary
20. Ensure that RDP is enabled on the machine so we can remote in with RDP if needed in the future.
    Go to Setting->System
    Click remote desktop
    Click the remote login tab
    Enable Remote Login
    Make username guard
    Make a password that you will remember
    You can click verify encryption but I don't think we need to do that
    Exit out of settings and go back in to verify that all changes were saved
    Note that remote desktop will be accessed via port 3389.
    Desktop sharing is accessed via port 3390 (typically, if remote desktop is enabled. Ubuntu should assign these ports by default).

WIFI SNIFFING DEPLOYMENT:
1. Use access token to pull down the wifi_sniffer_deploy_v14 project from github. Use the following command: git clone https://<access_token>@github.com/jeisen-sportsmansdeals/wifi_sniffer_deploy_v17.git
2. Navigate to the wifi_sniffer_deploy_v17 folder that is now present on the local machine.
3. Make send_wifi_stats.sh and start.sh executable (chmod +x <filename>)
4. Install venv. Try to create virtual environment for the bash scripts to call python script with:
    python3 -m venv nic_env
    If that doesn't work, install with sud apt install python3.12-venv
    Once installed, it should automatically create the nic_env. Remove it with rm -r nic_env, and re-create with python3 -m venv nic_env
    Activate virtual environment: source nic_env/bin/activate
    Install requirements.txt: pip3 install -r requirements.txt
    Deactivate the virtual environment
5. The C code will take care of creating the capture directories automatically. One capture directory will be created for each NIC used in the capture (up to 8 maximum NICs).
6. A backups directory will be created automatically by the send_wifi_stats.sh script if it does not already exist.
7. Compile the wifi sniffer using gcc -o sniff sniff.c -libpcap
8. Run a test by calling ./send_wifi_stats.sh. All directories should be created automatically, including the backups directory. 8 capture directories should be created if we are deploying on the typical machine that has 8 NICs connected.
9. If the test is successful and files are being saved, cron the send_wifi_stats.sh script to send every 15 minutes. Be sure to create a log file in the /var/log directory called wifi_bash.log with permission 777 (might be overkill). (see crontab setup at bottom of document)
10. Note that the repository is updated now to have a 23 and 24 version for the sniff.c source file (labeled sniff_23.c and sniff_24.c respectively). Use the appropriate file for whichever deployment type you are working on. The same goes for the stop.sh script (labeled stop_23.sh and stop_24.sh respectively).

BLUETOOTH SNIFFING DEPLOYMENT:
1. Use access token to pull down the bluetooth_sniffers_v4 project from github. Use the following command: git clone https://<access_token>@github.com/jeisen-sportsmansdeals/bluetooth_sniffers_v4.git
2. Navigate to the bluetooth_sniffers_v4 directory which is now present on the local machine.
3. Update the box_id.txt file to contain the proper box ID for the location that the machine will be deployed at (if needed). It is in the /home/guard directory.
4. The send_bt_stats.sh script should create both capture folders if they do not yet exist, as well as the backups folder if it does not yet exist.
5. Open the bt_scanners.c source file and ensure that the MAC addresses of each of the bluetooth adapters is correct. This will change for each deployment so it is important to check this by using hciconfig, lsusb, and/or bluetoothctl. Once you get the list of bluetooth adapter MAC addresses, try running the bt_scanners program manually with sudo ./bt_scanners. If it fails, it is most likely because the MAC addresses need to be switched, as there is only 1 external bluetooth adapter, which is the only adapter on-board the machine that can do bluetooth LE. We are using the built-in bluetooth adapter currently in order to do bluetooth classic scans, and this adapter must not be capable of doing bluetooth LE (from what I can tell, but I'm not 100% sure). Either way, in the past, switching the MAC address assignments for the adapters worked. Compile with gcc -o bt_scanners bt_scanners.c -lbluetooth
6. Re-compile if necessary. Inspect the send_bt_stats.sh script to ensure that the folders are named properly.
7. Run the send_bt_stats.sh script after running chmod +x on it to make it executable. Also need to be sure that stop.sh script is executable as well.
8. Check that the files are being saved. If that is the case, cron the send_bt_stats.sh script to run every 16 minutes. Be sure to create a log file in the /var/log directory called bt_bash.log with permission 777 (might be overkill). (see crontab setup at bottom of document)

LPR DEPLOYMENT: (We are not using LPR on the 23 series machines at the moment but we want the server there for the future. May want to disable and stop the lpr_server service and disable and stop nginx as we don't need them right now)
1. Use access token to pull down the lpr_flask_server project from github. Use the following command: git clone https://<access_token>@github.com/jeisen-sportsmansdeals/lpr_flask_server.git
2. Rename the new directory to "lpr_server".
3. Create a virtual environment for the server to run:
    Run sudo apt update
    Be sure that venv (a subset of virtualenv) is installed on the machine. Try creating the virtual environment with "python3 -m venv venv" (uses venv to create a virtual environment in the current directory called "venv")
    If that fails, you should get a message stating that you must install venv using "sudo apt install python3.11-venv". Run this command to install and try creating the virtual environment again.
4. If the following aren't already installed, install the following with: sudo apt install python3-pip python3-dev build-essential libssl-dev libffi-dev python3-setuptools (shouldn't need to do this though). I believe these packages 
   should already be installed, but I included this step in case we get errors later on in the setup process for troubleshooting purposes.
5. Install modules from requirements.txt
    Navigate to the project folder and activate the virtual environment with source ./venv/bin/activate
    run pip3 install -r requirements.txt
    Start the server in development mode by running python3 app.py
6. Ensure that Gunicorn can run the application properly by manually running with Gunicorn: gunicorn --bind 0.0.0.0:5000 wsgi:app. You should be able to navigate to the url and see a method not permitted
    response from the server (the server is only configured to handle POST requests). You can also use postman to test it out as well but this probably isn't necessary.
7. Deactivate the virtual environment on the command line with deactivate
8. Install Nginx. Run sudo apt install nginx
9. Create a unit file for the flask app service called lpr_server.service sudo nano /etc/systemd/system/lpr_server.service In the file, add the following:
***********************************************************************************************
[Unit]
Description=Gunicorn instance to serve lpr_server
After=network.target

[Service]
User=guard
Group=www-data
WorkingDirectory=/home/guard/lpr_server
Environment="PATH=/home/guard/lpr_server/venv/bin"
ExecStart=/home/guard/lpr_server/venv/bin/gunicorn --workers 3 --bind 127.0.0.1:7982 wsgi:app

[Install]
WantedBy=multi-user.target
***********************************************************************************************
10. Start and enable the service with the following:
    sudo systemctl start lpr_server
    sudo systemctl enable lpr_server (running enable will make it so the lpr_server service starts up on boot automatically)
11. Check the status of the service with sudo systemctl status lpr_server
12. Configure Nginx to pass the requests to the flask server running on the specified port in the wsgi.py file entry point. To do this we need to create a new server block configuration file in the  
    sites-available directory with the following: sudo nano /etc/nginx/sites-available/lpr_server
    The file should look as follows:
***********************************************************************************************
server {
    listen 7985;
    server_name localhost;

    location / {
        include proxy_params;
        proxy_pass http://127.0.0.1:7982;
        # proxy_pass http://unix:home/guard/lpr_server/lpr_server.sock;
    }
}
***********************************************************************************************
13. Test this file for errors with: sudo nginx -t
14. Link the server block config file we just created to the sites-enabled folder with a simlink: sudo ln -s /etc/nginx/sites-available/lpr_server /etc/nginx/sites-enabled
15. Restart nginx: sudo systemctl restart nginx
16. Check the status of nginx by running sudo systemctl status nginx
17. Enable nginx so that it starts the enabled service(s) on boot: sudo systemctl enable nginx
18. Check nginx status and the lpr_server.service status again as well to be sure everything is running properly together.
19. Adjust the firewall if necessary (only do this if we need to at a later point I'd say, and only if we run into issues getting the server to work).
20. At this point, the server should be up and running. Be sure that we have called enable on both the wsgi service as well as nginx so that they both start on boot.
21. Make the lpr_send_stats.sh script executable by running chmod +x lpr_send_stats.sh
22. Be sure that zip is installed, as lpr_send_stats.sh requires zip to be installed. To install, run sudo apt install zip
23. Create a directory called "backups" for the lpr_send_stats.sh script to create and save backups to the capture files in.
24. Cron the file upload (send_lpr_stats.sh) script so that we can send stats up to the remote server. Type crontab -e and append the following line to the file: */15 * * * * /home/guard/lpr_server/lpr_send_stats.sh >> /var/log/lpr_bash.log 2>&1
25. Create the lpr_bash.log file in the /var/log directory. Give the file permission of 777:
    cd /var/log
    sudo touch lpr_bash.log
    sudo chmod 777 lpr_bash.log



CRONTAB SETUP:
*/15 * * * * /usr/bin/flock -n /tmp/send_wifi_stats.lock /home/guard/wifi_sniffer_deploy_v17/send_wifi_stats.sh >> /var/log/wifi_bash.log 2>&1
*/18 * * * * /usr/bin/flock -n /tmp/send_bt_stats.lock /home/guard/bluetooth_sniffers_v4/send_bt_stats.sh >> /var/log/bt_bash.log 2>&1
*/17 * * * * /usr/bin/flock -n /tmp/lpr_send_stats.lock /home/guard/lpr_server/lpr_send_stats.sh >> /var/log/lpr_bash.log 2>&1

10 0 * * * find /home/guard/lpr_server/backups/* -name "*.csv" -type f -mtime +3 -exec rm {} \;
11 0 * * * find /home/guard/wifi_sniffer_deploy_v17/backups/* -name "*.pcap" -type f -mtime +7 -exec rm {} \;
12 0 * * * find /home/guard/bluetooth_sniffers_v\*/* -name "*.csv" -type f -mtime +7 -exec rm {} \;
