There are two ways to compile C code for linux. You can statically link the external libraries that your code uses. This means that once the compiler has replaced your included headers with the actual contents of each header file, it will use the function definitions used in each of those header files to understand your function calls and typedefs in your C code. When you link the libpcap library or other external libraries, the linker will see those references to the external libraries in the object file generated after compilation takes place. The linker then looks for their implementations in the linked library's shared library (.so) or static library (.a), depending on how you linked the external library. If you statically linked, then it includes the function definitions directly into the executable from the static library you linked. If you dynamically linked, it creates references to the shared library (.so), indicating where to find the function implementations at runtime. Statically linking results in a larger binary file, whereas dynamically linking results in a smaller binary file, but requires the dependencies (the dynamically linked library) to be installed on the host machine. The statically linked approach will work as a standalone program whereas dynamically linked will rely on the precompiled machine code present in the external library to execute the program at runtime.

When dynamically linked, at runtime, the dynamic linker loads the shared library into memory. The linker then resolves references in your program to the actual functions in the shared library. The program then exectues using the already-compiled machine code in the shared library. Note that the .so extension stands for shared object, so for example, libpcap.so is libpcap's shared object file. This is what will be used when running a binary that dynamically linked the libpcap-dev library when compiling the program.

As long as the CPUs have the same architecture (x86_64 or ARM), and are running the same OS (ideally to ensure compatibility), we should be able to run the pre-compiled program (that was dynamically linked) on any of those machines.


